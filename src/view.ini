[view1]
query1 = create 

[view2]
query2 = create or replace view public.svv_table_info3 as SELECT (current_database())::character varying AS "database" , (pgn.nspname)::character varying AS "schema" , pgc.reloid AS table_id , (pgc.relname)::character varying AS "table" , CASE WHEN (stvb.encoded = 1) THEN 'Y'::character varying ELSE 'N'::character varying END AS encoded , CASE WHEN (pgc.releffectivediststyle = 0) THEN 'EVEN'::character varying WHEN (pgc.releffectivediststyle = 1) THEN (((('KEY('::character varying)::text || stvb."distkey") || (')'::character varying)::text))::character varying WHEN (pgc.releffectivediststyle = 8) THEN 'ALL'::character varying WHEN (pgc.releffectivediststyle = 10) THEN 'AUTO(ALL)'::character varying WHEN (pgc.releffectivediststyle = 11) THEN 'AUTO(EVEN)'::character varying WHEN (pgc.releffectivediststyle = 12) THEN (((('AUTO(KEY('::character varying)::text || stvb."distkey") || ('))'::character varying)::text))::character varying ELSE NULL::character varying END AS "diststyle" , (CASE WHEN ((pge.autosortkey = ((1)::character varying)::text) AND (stvb.sortkey1 IS NOT NULL)) THEN ((('AUTO(SORTKEY('::character varying)::text || stvb.sortkey1) || ('))'::character varying)::text) WHEN (pge.autosortkey = ((1)::character varying)::text) THEN ('AUTO(SORTKEY)'::character varying)::text ELSE stvb.sortkey1 END)::character varying AS sortkey1 , stvb.max_varchar , stvb.sortkey1_enc , stvb.sortkey_num , COALESCE(stvb.size , (0)::bigint) AS size , (((((COALESCE(stvb.size , (0)::bigint))::numeric)::numeric(18 ,0) * 100.0) / (((SELECT sum(sp.capacity) AS total_mb FROM stv_node_storage_capacity sp))::numeric)::numeric(18 ,0)))::numeric(10 ,4) AS pct_used , stvb.empty , (CASE WHEN ((((pgc.releffectivediststyle = 8) OR (pgc.releffectivediststyle = 10)) AND (stvp.max_rows > 0)) AND (stvb.sortkey1 IS NOT NULL)) THEN (((((stvp.max_rows - stvp.max_sorted_rows))::numeric)::numeric(18 ,0) * 100.0) / ((stvp.max_rows)::numeric)::numeric(18 ,0)) WHEN ((stvp.sum_rows > 0) AND (stvb.sortkey1 IS NOT NULL)) THEN (((((stvp.sum_rows - stvp.sum_sorted_rows))::numeric)::numeric(18 ,0) * 100.0) / ((stvp.sum_rows)::numeric)::numeric(18 ,0)) ELSE (NULL::numeric)::numeric(18 ,0) END)::numeric(5 ,2) AS unsorted , CASE WHEN ((pgs.stairows = (0)::double precision) AND ((pgs.staidels > (0)::double precision) OR (pgs.staiins > (0)::double precision))) THEN ((100)::numeric)::numeric(18 ,0) WHEN (((pgs.stairows = (0)::double precision) AND (pgs.staidels = (0)::double precision)) AND (pgs.staiins = (0)::double precision)) THEN (NULL::numeric)::numeric(18 ,0) WHEN (pgs.stairows IS NULL) THEN (NULL::numeric)::numeric(18 ,0) WHEN (CASE WHEN ((pgc.releffectivediststyle = 8) OR (pgc.releffectivediststyle = 10)) THEN stvp.max_rows ELSE stvp.sum_rows END = 0) THEN (NULL::numeric)::numeric(18 ,0) WHEN (pgs.stairows > (0)::double precision) THEN (LEAST((((pgs.staidels + pgs.staiins) * (100)::double precision) / pgs.stairows) , (100)::double precision))::numeric(5 ,2) ELSE (NULL::numeric)::numeric(18 ,0) END AS stats_off , CASE WHEN ((pgc.releffectivediststyle = 8) OR (pgc.releffectivediststyle = 10)) THEN ((stvp.max_rows)::numeric)::numeric(18 ,0) ELSE ((stvp.sum_rows)::numeric)::numeric(18 ,0) END AS tbl_rows , stvb.skew_sortkey1 , round(CASE WHEN (((pgc.releffectivediststyle = 1) OR (pgc.releffectivediststyle = 12)) AND (stvp.min_rows > 0)) THEN ((((stvp.max_rows)::numeric)::numeric(18 ,0) * 1.0) / ((stvp.min_rows)::numeric)::numeric(18 ,0)) WHEN ((((pgc.releffectivediststyle = 1) OR (pgc.releffectivediststyle = 12)) AND (stvp.min_rows = 0)) AND (stvp.max_rows > 0)) THEN ((100)::numeric)::numeric(18 ,0) ELSE (NULL::numeric)::numeric(18 ,0) END , 2) AS skew_rows , (pgs.stairows)::numeric(38 ,0) AS estimated_visible_rows , pge.risk_event , (((CASE WHEN (stvb.sortkey_num > 0) THEN COALESCE(stvt.avg_qpd , (0)::bigint) ELSE NULL::bigint END)::numeric)::numeric(18 ,0))::numeric(12 ,2) AS vacuum_sort_benefit , pgc.relcreationtime FROM ((((((pg_class_info pgc JOIN pg_namespace pgn ON ((pgc.relnamespace = pgn.oid))) JOIN (SELECT stv_tbl_perm.id , sum(stv_tbl_perm."rows") AS sum_rows , sum(stv_tbl_perm.sorted_rows) AS sum_sorted_rows , "max"(stv_tbl_perm."rows") AS max_rows , "max"(stv_tbl_perm.sorted_rows) AS max_sorted_rows , min(stv_tbl_perm."rows") AS min_rows FROM (stv_tbl_perm JOIN stv_slices USING (slice)) GROUP BY stv_tbl_perm.id) stvp ON ((pgc.reloid = (stvp.id)::oid))) JOIN (SELECT derived_table1.tbl , "max"((derived_table1.sortkey1)::text) AS sortkey1 , "max"((derived_table1.distkeycol)::text) AS "distkey" , "max"(derived_table1.varcharlen) AS max_varchar , sum(derived_table1.col_size) AS size , "max"(CASE WHEN (derived_table1.sortkey_num = 0) THEN derived_table1.col_size ELSE NULL::bigint END) AS max_col_size , "max"(CASE WHEN (derived_table1.sortkey1 IS NOT NULL) THEN derived_table1.col_size ELSE NULL::bigint END) AS sortkey_col_size , round((((("max"(CASE WHEN (derived_table1.sortkey_num = 0) THEN derived_table1.col_size ELSE NULL::bigint END))::numeric)::numeric(18 ,0) * 1.0) / (("max"(CASE WHEN (derived_table1.sortkey1 IS NOT NULL) THEN derived_table1.col_size ELSE NULL::bigint END))::numeric)::numeric(18 ,0)) , 2) AS skew_sortkey1 , sum(derived_table1.empty) AS empty , "max"(derived_table1.sortkey_num) AS sortkey_num , "max"(CASE WHEN ((derived_table1.sortkey1 IS NOT NULL) AND (derived_table1.attencodingtype > 0)) THEN 1 ELSE 0 END) AS encoded , "max"(((CASE WHEN (derived_table1.sortkey_num = 1) THEN format_encoding((derived_table1.attencodingtype)::integer) ELSE NULL::bpchar END)::character varying)::text) AS sortkey1_enc FROM (SELECT stvb.tbl , stvb.col , (CASE WHEN (pga.attsortkeyord = 1) THEN pga.attname WHEN (pga.attsortkeyord = -1) THEN 'INTERLEAVED'::name ELSE NULL::name END)::character varying AS sortkey1 , (CASE WHEN (pga.attisdistkey IS TRUE) THEN pga.attname ELSE NULL::name END)::character varying AS distkeycol , CASE WHEN ((pga.atttypid = (1042)::oid) OR (pga.atttypid = (1043)::oid)) THEN (pga.atttypmod - 4) ELSE 0 END AS varcharlen , pga.attencodingtype , abs(pga.attsortkeyord) AS sortkey_num , count(*) AS col_size , sum(CASE WHEN (stvb.tombstone > 0) THEN 1 ELSE 0 END) AS empty FROM (stv_blocklist stvb LEFT JOIN pg_attribute pga ON ((((stvb.tbl)::oid = pga.attrelid) AND (stvb.col = (pga.attnum - 1))))) WHERE ((stvb.tbl > 0) AND ((pga.attisdropped IS FALSE) OR (pga.attisdropped IS NULL))) GROUP BY stvb.tbl , stvb.col , (CASE WHEN (pga.attsortkeyord = 1) THEN pga.attname WHEN (pga.attsortkeyord = -1) THEN 'INTERLEAVED'::name ELSE NULL::name END)::character varying , (CASE WHEN (pga.attisdistkey IS TRUE) THEN pga.attname ELSE NULL::name END)::character varying , CASE WHEN ((pga.atttypid = (1042)::oid) OR (pga.atttypid = (1043)::oid)) THEN (pga.atttypmod - 4) ELSE 0 END , pga.attencodingtype , abs(pga.attsortkeyord)) derived_table1 GROUP BY derived_table1.tbl) stvb ON ((pgc.reloid = (stvb.tbl)::oid))) LEFT JOIN pg_statistic_indicator pgs ON ((pgc.reloid = pgs.stairelid))) LEFT JOIN (SELECT pg_class_extended.reloid , ("max"((CASE WHEN ((pg_class_extended.colnum = 5) AND (pg_class_extended.value <> (''::character varying)::text)) THEN ((regexp_substr(pg_class_extended.value , ('(\\d+\\|\\d+\\|)'::character varying)::text , 1 , 1 , ('e'::character varying)::text) || ((date_add(('us'::character varying)::text , (split_part(pg_class_extended.value , ('|'::character varying)::text , 3))::bigint , '2000-01-01 00:00:00'::timestamp without time zone))::character varying)::text))::character varying ELSE NULL::character varying END)::text))::character varying AS risk_event , "max"((CASE WHEN ((pg_class_extended.colnum = 12) AND (pg_class_extended.value = ((1)::character varying)::text)) THEN (pg_class_extended.value)::character varying ELSE NULL::character varying END)::text) AS autosortkey FROM pg_class_extended GROUP BY pg_class_extended.reloid) pge ON ((pgc.reloid = pge.reloid))) LEFT JOIN (SELECT stv_table_partitions.id , avg(stv_table_partitions.qpd) AS avg_qpd FROM stv_table_partitions WHERE ((stv_table_partitions.is_sorted = 'f'::bpchar) AND (stv_table_partitions.qpd > 0)) GROUP BY stv_table_partitions.id) stvt ON ((pgc.reloid = (stvt.id)::oid)));

[view3]
query3 = create or replace view public.wlm_query_state_vw as SELECT stv_wlm_query_state.query , (stv_wlm_query_state.service_class - 5) AS queue , stv_wlm_query_state.slot_count , btrim(((stv_wlm_query_state.wlm_start_time)::character varying)::text) AS start_time , btrim(((stv_wlm_query_state.state)::character varying)::text) AS state , btrim(((stv_wlm_query_state.queue_time)::character varying)::text) AS queue_time , btrim(((stv_wlm_query_state.exec_time)::character varying)::text) AS exec_time FROM stv_wlm_query_state;

[view4]
query4 = create or replace view public.wlm_queue_state_vw as SELECT (config.service_class - 5) AS queue , btrim((("class".condition)::character varying)::text) AS description , config.num_query_tasks AS slots , config.query_working_mem AS mem , config.max_execution_time AS max_time , config.user_group_wild_card AS "user_*" , config.query_group_wild_card AS "query_*" , state.num_queued_queries AS queued , state.num_executing_queries AS executing , state.num_executed_queries AS executed FROM stv_wlm_classification_config "class" , stv_wlm_service_class_config config , stv_wlm_service_class_state state WHERE ((("class".action_service_class = config.service_class) AND ("class".action_service_class = state.service_class)) AND (config.service_class > 4)) ORDER BY config.service_class;

[view5]
query5 = create or replace view public.test123 as SELECT pg_user.usename , pg_group.groname FROM pg_user , pg_group WHERE ((pg_user.usesysid = ANY (pg_group.grolist)) AND (pg_group.groname IN (SELECT DISTINCT pg_group.groname FROM pg_group)));

[view6]
query6 = create or replace view public.test_view123 as SELECT pg_group.groname FROM (pg_user JOIN pg_group ON ((pg_user.usesysid = ANY (pg_group.grolist)))) WHERE (pg_user.usename = ("current_user"())::name);

[view7]
query7 = create or replace view public.v_customersales_1 as SELECT c.c_tenantid , c.c_name , c.c_region , pgdate_part(('w'::character varying)::text , (to_date(((s.s_orderdate)::character varying)::text , ('YYYY-MM-DD'::character varying)::text))::timestamp without time zone) AS week , pgdate_part(('mon'::character varying)::text , (to_date(((s.s_orderdate)::character varying)::text , ('YYYY-MM-DD'::character varying)::text))::timestamp without time zone) AS "month" , pgdate_part(('dow'::character varying)::text , (to_date(((s.s_orderdate)::character varying)::text , ('YYYY-MM-DD'::character varying)::text))::timestamp without time zone) AS dow , pgdate_part(('yr'::character varying)::text , (to_date(((s.s_orderdate)::character varying)::text , ('YYYY-MM-DD'::character varying)::text))::timestamp without time zone) AS "year" , pgdate_part(('d'::character varying)::text , (to_date(((s.s_orderdate)::character varying)::text , ('YYYY-MM-DD'::character varying)::text))::timestamp without time zone) AS dom , t.t_namespace FROM tenant t , customer c , sales s WHERE ((((t.t_tenantid = c.c_tenantid) AND (c.c_tenantid = s.s_tenantid)) AND (c.c_custid = s.s_custid)) AND (c.c_name IN (SELECT (derived_table1.groname)::character varying(50) AS groname FROM (SELECT pg_group.groname , pg_user.usename FROM (pg_user JOIN pg_group ON ((pg_user.usesysid = ANY (pg_group.grolist))))) derived_table1)));

[view8]
query8 = create or replace view public.v_customersales as /* partner:Aginity Pro -v 0.32.789 */ 

[view9]
query9 = create  or  replace  view  v_customersales  as  select  c.c_tenantid  ,  c.c_name  ,  c.c_region  ,  	date_part(w  ,  to_date(s.s_orderdate  ,'YYYY-MM-DD'))  as  "week"  ,  	date_part(mon  ,  to_date(s.s_orderdate  ,'YYYY-MM-DD'))  as  "month"  ,  	date_part(dow  ,  to_date(s.s_orderdate  ,'YYYY-MM-DD'))  as  "dow"  ,  	date_part(yr  ,  to_date(s.s_orderdate  ,'YYYY-MM-DD'))  as  "year"  ,  	date_part(d  ,  to_date(s.s_orderdate  ,'YYYY-MM-DD'))  as  "dom"  ,  	t.t_namespace  from  public.tenant  t  ,  public.customer  c  ,  public.sales  s  where  t.t_tenantid  =  c.c_tenantid  and  c.c_tenantid  =  s.s_tenantid  and  c.c_custid  =  s.s_custid  and  c.c_name  =  current_user  WITH  NO  SCHEMA  BINDING;

[view10]
query10 = create or replace view public.v_sales as SELECT s.s_tenantid , s.s_orderid , s.s_custid , s.s_totalprice , s.s_orderdate , t.t_tenantid , t.t_name , t.t_namespace , t.t_account FROM sales s , tenant t WHERE ((s.s_tenantid = t.t_tenantid) AND ((t.t_namespace)::bpchar = "current_namespace"()));

[view11]
query11 = create or replace view public.v_customer as SELECT c.c_tenantid , c.c_custid , c.c_name , c.c_region , t.t_tenantid , t.t_name , t.t_namespace , t.t_account FROM customer c , tenant t WHERE ((c.c_tenantid = t.t_tenantid) AND ((c.c_name)::bpchar = "current_user"()));

[view12]
query12 = create or replace view public.cancelled_flights as /* partner:Aginity Pro -v 0.31.3 */ 

[view13]
query13 = create materialized view cancelled_flights as  (select  count(1) , year  , month  , uniquecarrier  , airlineid  , case when code is null then 'misc' else code end as code  , case when description is null then 'misc' else description end as description from airline.on_time_on_time_performance_2016 x left outer join airline.l_cancellation y  on x.cancellationcode = y.code  group by  year  , month  , uniquecarrier  , airlineid  , code  , description  );

[view14]
query14 = create or replace view public.v_constraint_dependency as SELECT DISTINCT srcobj.oid AS src_oid , srcnsp.nspname AS src_schemaname , srcobj.relname AS src_objectname , tgtobj.oid AS dependent_oid , tgtnsp.nspname AS dependent_schemaname , tgtobj.relname AS dependent_objectname , con.conname AS constraint_name FROM ((((pg_class srcobj JOIN pg_namespace srcnsp ON ((srcobj.relnamespace = srcnsp.oid))) JOIN pg_constraint con ON ((srcobj.oid = con.confrelid))) JOIN pg_class tgtobj ON ((tgtobj.oid = con.conrelid))) JOIN pg_namespace tgtnsp ON ((tgtobj.relnamespace = tgtnsp.oid)));

[view15]
query15 = create or replace view public.v_view_dependency as SELECT DISTINCT srcobj.oid AS src_oid , srcnsp.nspname AS src_schemaname , srcobj.relname AS src_objectname , tgtobj.oid AS dependent_viewoid , tgtnsp.nspname AS dependent_schemaname , tgtobj.relname AS dependent_objectname FROM (((((pg_class srcobj JOIN pg_depend srcdep ON ((srcobj.oid = srcdep.refobjid))) JOIN pg_depend tgtdep ON ((srcdep.objid = tgtdep.objid))) JOIN pg_class tgtobj ON (((tgtdep.refobjid = tgtobj.oid) AND (srcobj.oid <> tgtobj.oid)))) LEFT JOIN pg_namespace srcnsp ON ((srcobj.relnamespace = srcnsp.oid))) LEFT JOIN pg_namespace tgtnsp ON ((tgtobj.relnamespace = tgtnsp.oid))) WHERE ((tgtdep.deptype = 'i'::"char") AND (tgtobj.relkind = 'v'::"char"));

[view16]
query16 = create or replace view crown.crow_poc_view as 

[view17]
query17 = create MATERIALIZED view crow_poc_view as WITH opAct as (   SELECT DISTINCT fos.user_oprtnl_id ,       du.first_name  as current_user_first_name ,       du.middle_name  as current_user_middle_name ,       du.last_name as current_user_last_name ,       sum(end_work_meter_sec - start_work_meter_sec)       over (partition by fos.user_oprtnl_id)  as work_time ,       --  rank() over (order by sum(end_work_meter_sec - start_work_meter_sec) over (partition by user_oprtn  l_id)) AS work_time_rank ,       sum(end_logon_meter_sec - start_logon_meter_sec)       over (partition by fos.user_oprtnl_id) AS logon_time   FROM (select end_work_meter_sec ,      start_work_meter_sec ,      user_oprtnl_id ,      dim_eqpmnt_id ,      end_logon_meter_sec ,      start_logon_meter_sec     from fact_operator_session fos --     where fos.location_oprtnl_id IN (7042 , 2886 , 4742 , 4743 , 2058 , 2059 , 2060 , 2765 , 6478 , 2064 , --                2066 , 2068 , 472 , 2072 , 9688 , 2073 , 474 , 475 , 477 , 478 , 862 , 479 , 480 , 11108 , --                2661 , 6760 , 8681)    ) fos      INNER JOIN (select dim_eqpmnt_id from dim_eqpmnt ) de ON fos.dim_eqpmnt_id = de.dim_eqpmnt_id      INNER JOIN (select first_name , middle_name , last_name , user_oprtnl_id , eqpmnt_role_id          from dim_user          where current_flag = 1          and user_type IN ('USER' , 'ERASED')          ) du ON fos.user_oprtnl_id = du.user_oprtnl_id ) , optActRank as (SELECT   user_oprtnl_id ,    current_user_first_name ,    current_user_middle_name ,    current_user_last_name ,    logon_time ,   work_time ,     rank () over (order by work_time desc) as work_time_rank_desc ,    -- rank () over ( order by work_time) as work_time_rank_asc ,    count(*) over () as cnt from opAct)  SELECT   user_oprtnl_id ,   current_user_first_name ,   current_user_middle_name ,   current_user_last_name ,   cnt AS opCnt ,   logon_time ,   work_time ,   work_time_rank_desc FROM   optActRank --  WHERE --  work_time_rank_desc <= 5 --    OR work_time_rank_desc > cnt - 5 UNION SELECT   NULL AS user_oprtnl_id ,   NULL AS current_user_first_name ,   NULL AS current_user_middle_name ,   NULL AS current_user_last_name ,   (CASE   WHEN COUNT(DISTINCT user_oprtnl_id) = 0 THEN NULL   ELSE COUNT(DISTINCT user_oprtnl_id)   END) AS opCnt ,   SUM(logon_time) / (CASE   WHEN COUNT(DISTINCT user_oprtnl_id) = 0 THEN NULL   ELSE COUNT(DISTINCT user_oprtnl_id)   END) AS logon_time ,   SUM(work_time) / (CASE   WHEN COUNT(DISTINCT user_oprtnl_id) = 0 THEN NULL   ELSE COUNT(DISTINCT user_oprtnl_id)   END) AS work_time ,   NULL AS work_time_rank_desc FROM   optActRank   ;

[view18]
query18 = create or replace view adventureworksdw.vassocseqorders as SELECT DISTINCT vdmprep.ordernumber , vdmprep.customerkey , vdmprep."region" , vdmprep.incomegroup FROM adventureworksdw.vdmprep WHERE (vdmprep.fiscalyear = '2013'::bpchar);

[view19]
query19 = create or replace view adventureworksdw.vassocseqlineitems as SELECT vdmprep.ordernumber , vdmprep.linenumber , vdmprep."model" FROM adventureworksdw.vdmprep WHERE (vdmprep.fiscalyear = '2013'::bpchar);

[view20]
query20 = create or replace view adventureworksdw.vtimeseries as SELECT 'CREATE VIEW vTimeSeries\015\012AS\015\012  SELECT\015\012    CASE Model\015\012    WHEN \'Mountain-100\' THEN \'M200\'\015\012    WHEN \'Road-150\' THEN \'R250\'\015\012    WHEN \'Road-650\' THEN \'R750\'\015\012    WHEN \'Touring-1000\' THEN \'T1000\'\015\012    ELSE SUBSTRING(Model FROM 1 FOR 1) || SUBSTRING(Model FROM CHAR_LENGTH(Model)- 2)\015\012    END || \' \' || Region AS ModelRegion\015\012   ,CalendarYear *100 + "Month" AS  TimeIndex\015\012   ,SUM(Quantity) AS Quantity\015\012   ,SUM(Amount) AS Amount\015\012   ,CalendarYear\015\012   ,"Month"\015\012   ,CAST((CalendarYear-1900) *10000 + "Month" *100 + 25 AS DATE)\015\012    AS ReportingDate\015\012  FROM\015\012    vDMPrep\015\012  WHERE\015\012    Model IN (\'Mountain-100\' , \'Mountain-200\' , \'Road-150\' , \'Road-250\' ,\015\012    \'Road-650\' , \'Road-750\' , \'Touring-1000\')\015\012  GROUP BY\015\012    ModelRegion\015\012   ,TimeIndex\015\012   ,CalendarYear\015\012   ,"Month"\015\012   ,ReportingDate\015\012;' AS text , '13120 - Severity CRITICAL - Amazon Redshift does not support the CAST function with such number/type of arguments. Perform a manual conversion.\012' AS error_msg;

[view21]
query21 = create or replace view adventureworksdw.vtargetmail as SELECT c.customerkey , c.geographykey , c.customeralternatekey , c.title , c.firstname , c.middlename , c.lastname , c.namestyle , c.birthdate , c.maritalstatus , c.suffix , c.gender , c.emailaddress , c.yearlyincome , c.totalchildren , c.numberchildrenathome , c.englisheducation , c.spanisheducation , c.frencheducation , c.englishoccupation , c.spanishoccupation , c.frenchoccupation , c.houseownerflag , c.numbercarsowned , c.addressline1 , c.addressline2 , c.phone , c.datefirstpurchase , c.commutedistance , x."region" , x.age , CASE WHEN (x.bikes = 0) THEN 0 ELSE 1 END AS bikebuyer FROM (adventureworksdw.dimcustomer c JOIN (SELECT vdmprep.customerkey , vdmprep."region" , vdmprep.age , sum(CASE WHEN ((vdmprep.englishproductcategoryname)::text = 'Bikes'::text) THEN 1 ELSE 0 END) AS bikes FROM adventureworksdw.vdmprep GROUP BY vdmprep.customerkey , vdmprep."region" , vdmprep.age) x ON ((c.customerkey = x.customerkey)));

[view22]
query22 = create or replace view adventureworksdw.vdmprep as SELECT pc.englishproductcategoryname , COALESCE(p.modelname , p.englishproductname) AS "model" , c.customerkey , s.salesterritorygroup AS "region" , ((months_between((('now'::text)::date)::timestamp without time zone , (c.birthdate)::timestamp without time zone) / (12)::double precision))::integer AS age , CASE WHEN (c.yearlyincome < (40000)::numeric(18 ,4)) THEN 'Low'::text WHEN (c.yearlyincome > (60000)::numeric(18 ,4)) THEN 'High'::text ELSE 'Moderate'::text END AS incomegroup , d.calendaryear , d.fiscalyear , d.monthnumberofyear AS "month" , f.salesordernumber AS ordernumber , f.salesorderlinenumber AS linenumber , f.orderquantity AS quantity , f.extendedamount AS amount FROM (((((((adventureworksdw.factinternetsales f JOIN adventureworksdw.dimdate d ON ((f.orderdatekey = d.datekey))) JOIN adventureworksdw.dimproduct p ON ((f.productkey = p.productkey))) JOIN adventureworksdw.dimproductsubcategory psc ON ((p.productsubcategorykey = psc.productsubcategorykey))) JOIN adventureworksdw.dimproductcategory pc ON ((psc.productcategorykey = pc.productcategorykey))) JOIN adventureworksdw.dimcustomer c ON ((f.customerkey = c.customerkey))) JOIN adventureworksdw.dimgeography g ON ((c.geographykey = g.geographykey))) JOIN adventureworksdw.dimsalesterritory s ON ((g.salesterritorykey = s.salesterritorykey)));

[view23]
query23 = create or replace view airline.cancelled_flights as /* partner:Aginity Pro -v 0.31.3 */ 

[view24]
query24 = create  materialized view airline.cancelled_flights as  (select  count(1) as totalcount ,sum(nvl(carrierdelay ,0)) as carrierdelayagg , year  , month  , uniquecarrier  , airlineid  ,originstatename , case when code is null then 'misc' else code end as code_ed , case when description is null then 'misc' else description end as description_ed from airline.on_time_on_time_performance_2016 x inner join airline.l_cancellation y  on x.cancellationcode = y.code  group by  year  , month  , uniquecarrier  , airlineid ,originstatename , case when code is null then 'misc' else code end , case when description is null then 'misc' else description end );

[view25]
query25 = create or replace view cdedm.lu_fl_solution_fault as SELECT 'Y' AS fl_solution_fault , 'Solutions Fault' AS fault_desc UNION SELECT 'N' AS fl_solution_fault , 'Not Solutions Fault' AS fault_desc;

[view26]
query26 = create or replace view cdedm.cdm_calendar_create_dt_v as SELECT cdm_calendar.calendar_dt_pk , cdm_calendar.calendar_dt , cdm_calendar.calendar_yr_mo , cdm_calendar.calendar_yr , cdm_calendar.rev_yr_mo , cdm_calendar.rev_yr_qtr , cdm_calendar.rev_yr , cdm_calendar.insert_dt , cdm_calendar.update_dt , cdm_calendar.company_work_day_ind , cdm_calendar.holiday_ind , cdm_calendar.work_day_seq_num FROM cdedm.cdm_calendar;

[view27]
query27 = create or replace view admin.v_generate_vw_ddl as SELECT derived_table3.table_id , regexp_replace((derived_table3.schemaname)::text , '^zzzzzzzz'::text , ''::text) AS schemaname , regexp_replace((derived_table3.tablename)::text , '^zzzzzzzz'::text , ''::text) AS tablename , derived_table3.seq , derived_table3.ddl FROM (SELECT derived_table2.table_id , derived_table2.schemaname , derived_table2.tablename , derived_table2.seq , derived_table2.ddl FROM (((((SELECT (c.oid)::bigint AS table_id , n.nspname AS schemaname , c.relname AS tablename , 0 AS seq , ((((('--DROP VIEW '::text + quote_ident((n.nspname)::text)) + '.'::text) + quote_ident((c.relname)::text)) + ';'::text))::character varying AS ddl FROM (pg_namespace n JOIN pg_class c ON ((n.oid = c.relnamespace))) WHERE ((c.relkind = 'v'::"char") AND ((n.nspname <> 'pg_catalog'::name) AND (n.nspname <> 'information_schema'::name))) UNION SELECT (c.oid)::bigint AS table_id , n.nspname AS schemaname , c.relname AS tablename , 2 AS seq , ((((('CREATE OR REPLACE VIEW '::text + quote_ident((n.nspname)::text)) + '.'::text) + quote_ident((c.relname)::text)) + ''::text))::character varying AS ddl FROM (pg_namespace n JOIN pg_class c ON ((n.oid = c.relnamespace))) WHERE ((c.relkind = 'v'::"char") AND ((n.nspname <> 'pg_catalog'::name) AND (n.nspname <> 'information_schema'::name)))) UNION SELECT (c.oid)::bigint AS table_id , n.nspname AS schemaname , c.relname AS tablename , 5 AS seq , '('::character varying AS ddl FROM (pg_namespace n JOIN pg_class c ON ((n.oid = c.relnamespace))) WHERE ((c.relkind = 'v'::"char") AND ((n.nspname <> 'pg_catalog'::name) AND (n.nspname <> 'information_schema'::name)))) UNION SELECT derived_table1.table_id , derived_table1.schemaname , derived_table1.tablename , derived_table1.seq , ((((((((((('\011'::text + derived_table1.col_delim) + derived_table1.col_name) + ' '::text) + derived_table1.col_datatype) + ' '::text) + derived_table1.col_nullable) + ' '::text) + derived_table1.col_default) + ' '::text) + derived_table1.col_encoding))::character varying AS ddl FROM (SELECT (c.oid)::bigint AS table_id , n.nspname AS schemaname , c.relname AS tablename , (100000000 + a.attnum) AS seq , CASE WHEN (a.attnum > 1) THEN ' ,'::text ELSE ''::text END AS col_delim , quote_ident((a.attname)::text) AS col_name , CASE WHEN (strpos(upper(format_type(a.atttypid , a.atttypmod)) , 'CHARACTER VARYING'::text) > 0) THEN "replace"(upper(format_type(a.atttypid , a.atttypmod)) , 'CHARACTER VARYING'::text , 'VARCHAR'::text) WHEN (strpos(upper(format_type(a.atttypid , a.atttypmod)) , 'CHARACTER'::text) > 0) THEN "replace"(upper(format_type(a.atttypid , a.atttypmod)) , 'CHARACTER'::text , 'CHAR'::text) ELSE upper(format_type(a.atttypid , a.atttypmod)) END AS col_datatype , CASE WHEN (format_encoding((a.attencodingtype)::integer) = 'none'::bpchar) THEN 'ENCODE RAW'::text ELSE ('ENCODE '::text + (format_encoding((a.attencodingtype)::integer))::text) END AS col_encoding , CASE WHEN (a.atthasdef IS TRUE) THEN ('DEFAULT '::text + adef.adsrc) ELSE ''::text END AS col_default , CASE WHEN (a.attnotnull IS TRUE) THEN 'NOT NULL'::text ELSE ''::text END AS col_nullable FROM (((pg_namespace n JOIN pg_class c ON ((n.oid = c.relnamespace))) JOIN pg_attribute a ON ((c.oid = a.attrelid))) LEFT JOIN pg_attrdef adef ON (((a.attrelid = adef.adrelid) AND (a.attnum = adef.adnum)))) WHERE (((c.relkind = 'v'::"char") AND ((n.nspname <> 'pg_catalog'::name) AND (n.nspname <> 'information_schema'::name))) AND (a.attnum > 0)) ORDER BY a.attnum) derived_table1) UNION SELECT (c.oid)::bigint AS table_id , n.nspname AS schemaname , c.relname AS tablename , 299999999 AS seq , ')'::character varying AS ddl FROM (pg_namespace n JOIN pg_class c ON ((n.oid = c.relnamespace))) WHERE ((c.relkind = 'v'::"char") AND ((n.nspname <> 'pg_catalog'::name) AND (n.nspname <> 'information_schema'::name)))) UNION SELECT (c.oid)::bigint AS table_id , n.nspname AS schemaname , c.relname AS tablename , 600250000 AS seq , (((((((((('COMMENT ON '::character varying)::text + (nvl2(cl.column_name , 'column '::character varying , 'table '::character varying))::text) + quote_ident(((n.nspname)::character varying)::text)) + ('.'::character varying)::text) + quote_ident(((c.relname)::character varying)::text)) + nvl2(cl.column_name , (('.'::character varying)::text + ((cl.column_name)::character varying)::text) , (''::character varying)::text)) + (' IS \''::character varying)::text) + quote_ident(des.description)) + ('\'; '::character varying)::text))::character varying AS ddl FROM (((pg_description des JOIN pg_class c ON ((c.oid = des.objoid))) JOIN pg_namespace n ON ((n.oid = c.relnamespace))) LEFT JOIN information_schema."columns" cl ON ((((cl.ordinal_position)::integer = des.objsubid) AND ((cl.table_name)::name = c.relname)))) WHERE ((c.relkind = 'v'::"char") AND ((n.nspname <> 'pg_catalog'::name) AND (n.nspname <> 'information_schema'::name)))) derived_table2 UNION (SELECT (c.oid)::bigint AS table_id , (('zzzzzzzz'::text || (n.nspname)::text))::character varying AS schemaname , (('zzzzzzzz'::text || (c.relname)::text))::character varying AS tablename , (700000000 + (con.oid)::integer) AS seq , ((((((('ALTER TABLE '::text + quote_ident((n.nspname)::text)) + '.'::text) + quote_ident((c.relname)::text)) + ' ADD '::text) + ((pg_get_constraintdef(con.oid))::character varying(1024))::text) + ';'::text))::character varying AS ddl FROM ((pg_constraint con JOIN pg_class c ON (((c.relnamespace = con.connamespace) AND (c.oid = con.conrelid)))) JOIN pg_namespace n ON ((n.oid = c.relnamespace))) WHERE ((c.relkind = 'v'::"char") AND (con.contype = 'f'::"char")) ORDER BY (700000000 + (con.oid)::integer)) ORDER BY 1 , 2 , 3 , 4) derived_table3;

[view28]
query28 = create or replace view admin.v_generate_tbl_ddl as SELECT derived_table4.table_id , regexp_replace((derived_table4.schemaname)::text , '^zzzzzzzz'::text , ''::text) AS schemaname , regexp_replace((derived_table4.tablename)::text , '^zzzzzzzz'::text , ''::text) AS tablename , derived_table4.seq , derived_table4.ddl FROM (SELECT derived_table3.table_id , derived_table3.schemaname , derived_table3.tablename , derived_table3.seq , derived_table3.ddl FROM (((((((((((((((SELECT (c.oid)::bigint AS table_id , n.nspname AS schemaname , c.relname AS tablename , 0 AS seq , ((((('--DROP TABLE '::text + quote_ident((n.nspname)::text)) + '.'::text) + quote_ident((c.relname)::text)) + ';'::text))::character varying AS ddl FROM (pg_namespace n JOIN pg_class c ON ((n.oid = c.relnamespace))) WHERE (c.relkind = 'r'::"char") UNION SELECT (c.oid)::bigint AS table_id , n.nspname AS schemaname , c.relname AS tablename , 2 AS seq , ((((('CREATE TABLE IF NOT EXISTS '::text + quote_ident((n.nspname)::text)) + '.'::text) + quote_ident((c.relname)::text)) + ''::text))::character varying AS ddl FROM (pg_namespace n JOIN pg_class c ON ((n.oid = c.relnamespace))) WHERE (c.relkind = 'r'::"char")) UNION SELECT (c.oid)::bigint AS table_id , n.nspname AS schemaname , c.relname AS tablename , 5 AS seq , '('::character varying AS ddl FROM (pg_namespace n JOIN pg_class c ON ((n.oid = c.relnamespace))) WHERE (c.relkind = 'r'::"char")) UNION SELECT derived_table1.table_id , derived_table1.schemaname , derived_table1.tablename , derived_table1.seq , ((((((((((('\011'::text + derived_table1.col_delim) + derived_table1.col_name) + ' '::text) + derived_table1.col_datatype) + ' '::text) + derived_table1.col_nullable) + ' '::text) + derived_table1.col_default) + ' '::text) + derived_table1.col_encoding))::character varying AS ddl FROM (SELECT (c.oid)::bigint AS table_id , n.nspname AS schemaname , c.relname AS tablename , (100000000 + a.attnum) AS seq , CASE WHEN (a.attnum > 1) THEN ' ,'::text ELSE ''::text END AS col_delim , quote_ident((a.attname)::text) AS col_name , CASE WHEN (strpos(upper(format_type(a.atttypid , a.atttypmod)) , 'CHARACTER VARYING'::text) > 0) THEN "replace"(upper(format_type(a.atttypid , a.atttypmod)) , 'CHARACTER VARYING'::text , 'VARCHAR'::text) WHEN (strpos(upper(format_type(a.atttypid , a.atttypmod)) , 'CHARACTER'::text) > 0) THEN "replace"(upper(format_type(a.atttypid , a.atttypmod)) , 'CHARACTER'::text , 'CHAR'::text) ELSE upper(format_type(a.atttypid , a.atttypmod)) END AS col_datatype , CASE WHEN (format_encoding((a.attencodingtype)::integer) = 'none'::bpchar) THEN 'ENCODE RAW'::text ELSE ('ENCODE '::text + (format_encoding((a.attencodingtype)::integer))::text) END AS col_encoding , CASE WHEN (a.atthasdef IS TRUE) THEN ('DEFAULT '::text + adef.adsrc) ELSE ''::text END AS col_default , CASE WHEN (a.attnotnull IS TRUE) THEN 'NOT NULL'::text ELSE ''::text END AS col_nullable FROM (((pg_namespace n JOIN pg_class c ON ((n.oid = c.relnamespace))) JOIN pg_attribute a ON ((c.oid = a.attrelid))) LEFT JOIN pg_attrdef adef ON (((a.attrelid = adef.adrelid) AND (a.attnum = adef.adnum)))) WHERE ((c.relkind = 'r'::"char") AND (a.attnum > 0)) ORDER BY a.attnum) derived_table1) UNION (SELECT (c.oid)::bigint AS table_id , n.nspname AS schemaname , c.relname AS tablename , (200000000 + (con.oid)::integer) AS seq , (('\011 ,'::text + pg_get_constraintdef(con.oid)))::character varying AS ddl FROM ((pg_constraint con JOIN pg_class c ON (((c.relnamespace = con.connamespace) AND (c.oid = con.conrelid)))) JOIN pg_namespace n ON ((n.oid = c.relnamespace))) WHERE ((c.relkind = 'r'::"char") AND (pg_get_constraintdef(con.oid) !~~ 'FOREIGN KEY%'::text)) ORDER BY (200000000 + (con.oid)::integer))) UNION SELECT (c.oid)::bigint AS table_id , n.nspname AS schemaname , c.relname AS tablename , 299999999 AS seq , ')'::character varying AS ddl FROM (pg_namespace n JOIN pg_class c ON ((n.oid = c.relnamespace))) WHERE (c.relkind = 'r'::"char")) UNION SELECT (c.oid)::bigint AS table_id , n.nspname AS schemaname , c.relname AS tablename , 300000000 AS seq , 'BACKUP NO'::character varying AS ddl FROM ((pg_namespace n JOIN pg_class c ON ((n.oid = c.relnamespace))) JOIN (SELECT split_part((pg_conf."key")::text , '_'::text , 5) AS id FROM pg_conf WHERE ((pg_conf."key" ~~ 'pg_class_backup_%'::text) AND (split_part((pg_conf."key")::text , '_'::text , 4) = ((SELECT pg_database.oid FROM pg_database WHERE (pg_database.datname = current_database())))::text))) t ON ((t.id = (c.oid)::text))) WHERE (c.relkind = 'r'::"char")) UNION SELECT (c.oid)::bigint AS table_id , n.nspname AS schemaname , c.relname AS tablename , 1 AS seq , '--WARNING: This DDL inherited the BACKUP NO property from the source table'::character varying AS ddl FROM ((pg_namespace n JOIN pg_class c ON ((n.oid = c.relnamespace))) JOIN (SELECT split_part((pg_conf."key")::text , '_'::text , 5) AS id FROM pg_conf WHERE ((pg_conf."key" ~~ 'pg_class_backup_%'::text) AND (split_part((pg_conf."key")::text , '_'::text , 4) = ((SELECT pg_database.oid FROM pg_database WHERE (pg_database.datname = current_database())))::text))) t ON ((t.id = (c.oid)::text))) WHERE (c.relkind = 'r'::"char")) UNION SELECT (c.oid)::bigint AS table_id , n.nspname AS schemaname , c.relname AS tablename , 300000001 AS seq , (CASE WHEN (c.reldiststyle = 0) THEN 'DISTSTYLE EVEN'::text WHEN (c.reldiststyle = 1) THEN 'DISTSTYLE KEY'::text WHEN (c.reldiststyle = 8) THEN 'DISTSTYLE ALL'::text WHEN (c.reldiststyle = 9) THEN 'DISTSTYLE AUTO'::text ELSE '<<Error - UNKNOWN DISTSTYLE>>'::text END)::character varying AS ddl FROM (pg_namespace n JOIN pg_class c ON ((n.oid = c.relnamespace))) WHERE (c.relkind = 'r'::"char")) UNION SELECT (c.oid)::bigint AS table_id , n.nspname AS schemaname , c.relname AS tablename , (400000000 + a.attnum) AS seq , (((' DISTKEY ('::text + quote_ident((a.attname)::text)) + ')'::text))::character varying AS ddl FROM ((pg_namespace n JOIN pg_class c ON ((n.oid = c.relnamespace))) JOIN pg_attribute a ON ((c.oid = a.attrelid))) WHERE (((c.relkind = 'r'::"char") AND (a.attisdistkey IS TRUE)) AND (a.attnum > 0))) UNION SELECT derived_table2.table_id , derived_table2.schemaname , derived_table2.tablename , derived_table2.seq , (CASE WHEN (derived_table2.min_sort < 0) THEN 'INTERLEAVED SORTKEY ('::text ELSE ' SORTKEY ('::text END)::character varying AS ddl FROM (SELECT (c.oid)::bigint AS table_id , n.nspname AS schemaname , c.relname AS tablename , 499999999 AS seq , min(a.attsortkeyord) AS min_sort FROM ((pg_namespace n JOIN pg_class c ON ((n.oid = c.relnamespace))) JOIN pg_attribute a ON ((c.oid = a.attrelid))) WHERE (((c.relkind = 'r'::"char") AND (abs(a.attsortkeyord) > 0)) AND (a.attnum > 0)) GROUP BY (c.oid)::bigint , n.nspname , c.relname , 4) derived_table2) UNION (SELECT (c.oid)::bigint AS table_id , n.nspname AS schemaname , c.relname AS tablename , (500000000 + abs(a.attsortkeyord)) AS seq , (CASE WHEN (abs(a.attsortkeyord) = 1) THEN ('\011'::text + quote_ident((a.attname)::text)) ELSE ('\011 , '::text + quote_ident((a.attname)::text)) END)::character varying AS ddl FROM ((pg_namespace n JOIN pg_class c ON ((n.oid = c.relnamespace))) JOIN pg_attribute a ON ((c.oid = a.attrelid))) WHERE (((c.relkind = 'r'::"char") AND (abs(a.attsortkeyord) > 0)) AND (a.attnum > 0)) ORDER BY abs(a.attsortkeyord))) UNION SELECT (c.oid)::bigint AS table_id , n.nspname AS schemaname , c.relname AS tablename , 599999999 AS seq , '\011)'::character varying AS ddl FROM ((pg_namespace n JOIN pg_class c ON ((n.oid = c.relnamespace))) JOIN pg_attribute a ON ((c.oid = a.attrelid))) WHERE (((c.relkind = 'r'::"char") AND (abs(a.attsortkeyord) > 0)) AND (a.attnum > 0))) UNION SELECT (c.oid)::bigint AS table_id , n.nspname AS schemaname , c.relname AS tablename , 600000000 AS seq , ';'::character varying AS ddl FROM (pg_namespace n JOIN pg_class c ON ((n.oid = c.relnamespace))) WHERE (c.relkind = 'r'::"char")) UNION SELECT (c.oid)::bigint AS table_id , n.nspname AS schemaname , c.relname AS tablename , 600250000 AS seq , (((((((((('COMMENT ON '::character varying)::text + (nvl2(cl.column_name , 'column '::character varying , 'table '::character varying))::text) + quote_ident(((n.nspname)::character varying)::text)) + ('.'::character varying)::text) + quote_ident(((c.relname)::character varying)::text)) + nvl2(cl.column_name , (('.'::character varying)::text + ((cl.column_name)::character varying)::text) , (''::character varying)::text)) + (' IS \''::character varying)::text) + quote_ident(des.description)) + ('\'; '::character varying)::text))::character varying AS ddl FROM (((pg_description des JOIN pg_class c ON ((c.oid = des.objoid))) JOIN pg_namespace n ON ((n.oid = c.relnamespace))) LEFT JOIN information_schema."columns" cl ON ((((cl.ordinal_position)::integer = des.objsubid) AND ((cl.table_name)::name = c.relname)))) WHERE (c.relkind = 'r'::"char")) UNION SELECT (c.oid)::bigint AS table_id , n.nspname AS schemaname , c.relname AS tablename , 600500000 AS seq , ((((((('ALTER TABLE '::text + quote_ident((n.nspname)::text)) + '.'::text) + quote_ident((c.relname)::text)) + ' owner to '::text) + quote_ident((u.usename)::text)) + ';'::text))::character varying AS ddl FROM ((pg_namespace n JOIN pg_class c ON ((n.oid = c.relnamespace))) JOIN pg_user u ON ((c.relowner = u.usesysid))) WHERE (c.relkind = 'r'::"char")) derived_table3 UNION (SELECT (c.oid)::bigint AS table_id , (('zzzzzzzz'::text || (n.nspname)::text))::character varying AS schemaname , (('zzzzzzzz'::text || (c.relname)::text))::character varying AS tablename , (700000000 + (con.oid)::integer) AS seq , ((((((('ALTER TABLE '::text + quote_ident((n.nspname)::text)) + '.'::text) + quote_ident((c.relname)::text)) + ' ADD '::text) + ((pg_get_constraintdef(con.oid))::character varying(1024))::text) + ';'::text))::character varying AS ddl FROM ((pg_constraint con JOIN pg_class c ON (((c.relnamespace = con.connamespace) AND (c.oid = con.conrelid)))) JOIN pg_namespace n ON ((n.oid = c.relnamespace))) WHERE ((c.relkind = 'r'::"char") AND (con.contype = 'f'::"char")) ORDER BY (700000000 + (con.oid)::integer)) ORDER BY 1 , 2 , 3 , 4) derived_table4;

