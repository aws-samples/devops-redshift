[DDL_v01]
query0 = SELECT 'create or replace view '|| nc.nspname::information_schema.sql_identifier ||'.'|| c.relname::information_schema.sql_identifier ||' as '||
         pg_get_viewdef(c.oid)::information_schema.character_data AS view_definition
         FROM pg_namespace nc, pg_class c, pg_user u
         WHERE c.relnamespace = nc.oid AND u.usesysid = c.relowner AND c.relkind = 'v'::"char"
         AND nc.nspname NOT IN ('pg_catalog', 'pg_toast', 'information_schema');
;query1 =    select
;                --tm.schemaname||'.'||tm.tablename as object_name,
;                'create table '||tm.schemaname||'.'||tm.tablename
;                ||' ('
;                ||cp.coldef
;                || ')'
;                -- diststyle
;                -- dist key
;                ||d.distkey
;                --sort key
;                || (select
;                ' sortkey(' ||substr(array_to_string(
;                 array( select ','||cast(column_name as varchar(100))  as str from
;                       (select column_name from information_schema.columns col where  col.table_schema= tm.schemaname and col.table_name=tm.tablename) c2
;                        join
;                        (-- gives sort cols
;                          select attrelid as tableid, attname as colname, attsortkeyord as sort_col_order from pg_attribute pa
;                          -- where
;                          -- pa.attnum > 0  AND NOT pa.attisdropped AND pa.attsortkeyord > 0
;                        ) st on tm.tableid=st.tableid and c2.column_name=st.colname   order by sort_col_order
;                                  )
;                            ,'')
;                          ,2,10000) || ')'
;                        )
;                        ||';' as ddl
;                        from
;                        -- t  master table list
;                        (
;                              SELECT
;                              substring(n.nspname,1,100) as schemaname, substring(c.relname,1,100) as tablename, c.oid as tableid
;                              FROM pg_namespace n, pg_class c
;                              WHERE n.oid = c.relnamespace
;                              AND nspname NOT IN ('pg_catalog', 'pg_toast', 'information_schema','pg_internal')
;                              AND relkind = 'r'
;                        --AND c.relname <> 'temp_staging_tables_1'
;                        ) tm
;                        -- cp  creates the col params for the create string
;                        join
;                        (select
;                        substr(str,(charindex('QQQ',str)+3),(charindex('ZZZ',str))-(charindex('QQQ',str)+3)) as tableid
;                        ,substr(replace(replace(str,'ZZZ',''),'QQQ'||substr(str,(charindex('QQQ',str)+3),(charindex('ZZZ',str))-(charindex('QQQ',str)+3)),''),2,10000) as coldef
;                        from
;                      ( select array_to_string(array(
;                      SELECT  'QQQ'||cast(t.tableid as varchar(10))||'ZZZ'|| ','||column_name||' '|| decode(udt_name,'bpchar','char',udt_name) || decode(character_maximum_length,null,'', '('||cast(character_maximum_length as varchar(9))||')'   )
;                      -- default
;                      || decode(substr(column_default,2,8),'identity','',null,'',' default '||column_default||' ')
;                      -- nullable
;                      || decode(is_nullable,'YES',' NULL ','NO',' NOT NULL ')
;                      -- identity
;                      || decode(substr(column_default,2,8),'identity',' identity('||substr(column_default,(charindex('''',column_default)+1), (length(column_default)-charindex('''',reverse(column_default))-charindex('''',column_default)   ) )  ||') ', '') as str
;                      from
;                      -- ci  all the col info
;                      (
;                      select cast(t.tableid as int), cast(table_schema as varchar(100)), cast(table_name as varchar(100)), cast(column_name as varchar(100)),
;                      cast(ordinal_position as int), cast(column_default as varchar(100)), cast(is_nullable as varchar(20)) , cast(udt_name as varchar(50))  ,cast(character_maximum_length as int),
;                      sort_col_order  , decode(d.colname,null,0,1) dist_key
;                      from (select * from information_schema.columns c where  c.table_schema= t.schemaname and c.table_name=t.tablename) c
;                      left join
;                      (-- gives sort cols
;                      select attrelid as tableid, attname as colname, attsortkeyord as sort_col_order from  pg_attribute a where
;                      a.attnum > 0  AND NOT a.attisdropped AND a.attsortkeyord > 0
;                      ) s on t.tableid=s.tableid and c.column_name=s.colname
;                      left join
;                      -- gives dist col
;                      (select attrelid as tableid, attname as colname from pg_attribute a where
;                        a.attnum > 0 AND NOT a.attisdropped  AND a.attisdistkey = 't'
;                      ) d on t.tableid=d.tableid and c.column_name=d.colname
;                      order by ordinal_position
;                      ) ci
;                      -- for the working array funct
;                      ), '') as str
;                            from
;                            (-- need tableid
;                            SELECT
;                            substring(n.nspname,1,100) as schemaname, substring(c.relname,1,100) as tablename, c.oid as tableid
;                            FROM pg_namespace n, pg_class c
;                            WHERE n.oid = c.relnamespace
;                            AND nspname NOT IN ('pg_catalog', 'pg_toast', 'information_schema','pg_internal')
;                            AND relkind = 'r'
;                            ) t
;                            -- for the agg functions that dont exist
;                            -- ) group by table_schema, table_name
;                            )) cp on tm.tableid=cp.tableid
;                        left join (select tableid, distkey from
;                        (SELECT
;                           c.oid::bigint as tableid
;                           ,n.nspname AS schemaname
;                           ,c.relname AS tablename
;                           ,300000001 AS seq
;                           ,CASE WHEN c.reldiststyle = 0 THEN 'DISTSTYLE EVEN'
;                            WHEN c.reldiststyle = 1 THEN NULL
;                            WHEN c.reldiststyle = 8 THEN 'DISTSTYLE ALL'
;                            WHEN c.reldiststyle = 9 THEN 'DISTSTYLE AUTO'
;                            ELSE '<<Error - UNKNOWN DISTSTYLE>>'
;                            END AS distkey
;                          FROM pg_namespace AS n
;                          INNER JOIN pg_class AS c ON n.oid = c.relnamespace
;                          WHERE c.relkind = 'r' and n.nspname NOT IN ('pg_catalog', 'pg_toast', 'information_schema','pg_internal')
;                            --and schemaname = 'appdb'
;                          --DISTKEY COLUMNS
;                          UNION SELECT
;                           c.oid::bigint as tableid
;                           ,n.nspname AS schemaname
;                           ,c.relname AS tablename
;                           ,400000000 + a.attnum AS seq
;                           ,' DISTKEY (' + QUOTE_IDENT(a.attname) + ')' AS distkey
;                          FROM pg_namespace AS n
;                          INNER JOIN pg_class AS c ON n.oid = c.relnamespace
;                          INNER JOIN pg_attribute AS a ON c.oid = a.attrelid
;                          WHERE c.relkind = 'r'
;                            AND a.attisdistkey IS TRUE
;                            and n.nspname NOT IN ('pg_catalog', 'pg_toast', 'information_schema','pg_internal')
;                            AND a.attnum > 0
;                          --and schemaname = 'appdb'
;                         )
;                         where distkey is not null --appdb.results
;                        ) d on tm.tableid=d.tableid;
query3 = CREATE VIEW admin.v_generate_tbl_ddl
            (
                table_id,
                schemaname,
                tablename,
                seq,
                ddl
            )
            AS
            SELECT derived_table4.table_id, regexp_replace(((derived_table4.schemaname)::character varying)::text, ('^zzzzzzzz'::character varying)::text,
            (''::character varying)::text) AS schemaname, regexp_replace(((derived_table4.tablename)::character varying)::text, ('^zzzzzzzz'::character varying)::text, (''::character varying)::text) AS tablename, derived_table4.seq, derived_table4.ddl FROM (SELECT derived_table3.table_id, derived_table3.schemaname, derived_table3.tablename, derived_table3.seq, derived_table3.ddl FROM (((((((((((((((SELECT (c.oid)::bigint AS table_id, n.nspname AS schemaname, c.relname AS tablename, 0 AS seq, (((((('--DROP TABLE '::character varying)::text + quote_ident(((n.nspname)::character varying)::text)) + ('.'::character varying)::text) + quote_ident(((c.relname)::character varying)::text)) + (';'::character varying)::text))::character varying AS ddl
            FROM (pg_namespace n JOIN pg_class c ON ((n.oid = c.relnamespace))) WHERE (c.relkind = 'r'::"char") UNION SELECT (c.oid)::bigint AS table_id, n.nspname AS schemaname, c.relname AS
            tablename, 2 AS seq, (((((('CREATE TABLE IF NOT EXISTS '::character varying)::text + quote_ident(((n.nspname)::character varying)::text)) + ('.'::character varying)::text) +
            quote_ident(((c.relname)::character varying)::text)) + (''::character varying)::text))::character varying AS ddl FROM (pg_namespace n JOIN pg_class c ON ((n.oid = c.relnamespace)))
            WHERE (c.relkind = 'r'::"char")) UNION SELECT (c.oid)::bigint AS table_id, n.nspname AS schemaname, c.relname AS tablename, 5 AS seq, '('::character varying AS ddl FROM (pg_namespace n
            JOIN pg_class c ON ((n.oid = c.relnamespace))) WHERE (c.relkind = 'r'::"char")) UNION SELECT derived_table1.table_id, derived_table1.schemaname, derived_table1.tablename,
            derived_table1.seq, (((((((((((('\011'::character varying)::text + (derived_table1.col_delim)::text) + derived_table1.col_name) + (' '::character varying)::text) +
            derived_table1.col_datatype) + (' '::character varying)::text) + (derived_table1.col_nullable)::text) + (' '::character varying)::text) + (derived_table1.col_default)::text) +
            (' '::character varying)::text) + derived_table1.col_encoding))::character varying AS ddl FROM (SELECT (c.oid)::bigint AS table_id, n.nspname AS schemaname, c.relname AS tablename, (100000000 + a.attnum) AS seq, CASE WHEN (a.attnum > 1) THEN ' ,'::character varying ELSE ''::character varying END AS col_delim, quote_ident(((a.attname)::character varying)::text) AS col_name, CASE WHEN (strpos(upper(format_type(a.atttypid, a.atttypmod)), ('CHARACTER VARYING'::character varying)::text) > 0) THEN "replace"(upper(format_type(a.atttypid, a.atttypmod)), ('CHARACTER VARYING'::character varying)::text, ('VARCHAR'::character varying)::text) WHEN (strpos(upper(format_type(a.atttypid, a.atttypmod)), ('CHARACTER'::character varying)::text) > 0) THEN "replace"(upper(format_type(a.atttypid, a.atttypmod)), ('CHARACTER'::character varying)::text, ('CHAR'::character varying)::text) ELSE upper(format_type(a.atttypid, a.atttypmod)) END AS col_datatype, CASE WHEN (format_encoding((a.attencodingtype)::integer) = 'none'::bpchar) THEN ('ENCODE RAW'::character varying)::text ELSE (('ENCODE '::character varying)::text + ((format_encoding((a.attencodingtype)::integer))::character varying)::text) END AS col_encoding, CASE WHEN (a.atthasdef IS TRUE) THEN ((('DEFAULT '::character varying)::text + adef.adsrc))::character varying ELSE ''::character varying END AS col_default, CASE WHEN (a.attnotnull IS TRUE) THEN 'NOT NULL'::character varying ELSE ''::character varying END AS col_nullable FROM (((pg_namespace n JOIN pg_class c ON ((n.oid = c.relnamespace))) JOIN pg_attribute a ON ((c.oid = a.attrelid))) LEFT JOIN pg_attrdef adef ON (((a.attrelid = adef.adrelid) AND (a.attnum = adef.adnum)))) WHERE ((c.relkind = 'r'::"char") AND (a.attnum > 0)) ORDER BY a.attnum) derived_table1) UNION (SELECT (c.oid)::bigint AS table_id, n.nspname AS schemaname, c.relname AS tablename, (200000000 + (con.oid)::integer) AS seq, ((('\011 ,'::character varying)::text + pg_get_constraintdef(con.oid)))::character
            varying AS ddl FROM ((pg_constraint con JOIN pg_class c ON (((c.relnamespace = con.connamespace) AND (c.oid = con.conrelid)))) JOIN pg_namespace n ON ((n.oid = c.relnamespace)))
            WHERE ((c.relkind = 'r'::"char") AND (pg_get_constraintdef(con.oid) !~~ ('FOREIGN KEY%'::character varying)::text)) ORDER BY (200000000 + (con.oid)::integer)))
            UNION SELECT (c.oid)::bigint AS table_id, n.nspname AS schemaname, c.relname AS tablename, 299999999 AS seq, ')'::character varying AS ddl FROM (pg_namespace n JOIN pg_class c
            ON ((n.oid = c.relnamespace))) WHERE (c.relkind = 'r'::"char")) UNION SELECT (c.oid)::bigint AS table_id, n.nspname AS schemaname, c.relname AS tablename, 300000000 AS seq,
            'BACKUP NO'::character varying AS ddl FROM ((pg_namespace n JOIN pg_class c ON ((n.oid = c.relnamespace))) JOIN (SELECT split_part(((pg_conf."key")::character varying)::text,
            ('_'::character varying)::text, 5) AS id FROM pg_conf WHERE ((pg_conf."key" ~~ ('pg_class_backup_%'::character varying)::text) AND (split_part(((pg_conf."key")::character varying)::text,
            ('_'::character varying)::text, 4) = (((SELECT pg_database.oid FROM pg_database WHERE (pg_database.datname = current_database())))::character varying)::text))) t ON ((t.id = ((c.oid)::character varying)::text)))
            WHERE (c.relkind = 'r'::"char")) UNION SELECT (c.oid)::bigint AS table_id, n.nspname AS schemaname, c.relname AS tablename, 1 AS seq,
            '--WARNING: This DDL inherited the BACKUP NO property from the source table'::character varying AS ddl FROM ((pg_namespace n JOIN pg_class c ON ((n.oid = c.relnamespace)))
            JOIN (SELECT split_part(((pg_conf."key")::character varying)::text, ('_'::character varying)::text, 5) AS id FROM pg_conf WHERE ((pg_conf."key" ~~ ('pg_class_backup_%'::character varying)::text)
            AND (split_part(((pg_conf."key")::character varying)::text, ('_'::character varying)::text, 4) = (((SELECT pg_database.oid FROM pg_database WHERE (pg_database.datname = current_database())))::character varying)::text))) t
            ON ((t.id = ((c.oid)::character varying)::text))) WHERE (c.relkind = 'r'::"char")) UNION SELECT (c.oid)::bigint AS table_id, n.nspname AS schemaname, c.relname AS tablename, 300000001 AS seq,
            CASE WHEN (c.reldiststyle = 0) THEN 'DISTSTYLE EVEN'::character varying WHEN (c.reldiststyle = 1) THEN 'DISTSTYLE KEY'::character varying WHEN (c.reldiststyle = 8) THEN 'DISTSTYLE ALL'::character varying WHEN (c.reldiststyle = 9)
            THEN 'DISTSTYLE AUTO'::character varying ELSE '<<Error - UNKNOWN DISTSTYLE>>'::character varying END AS ddl FROM (pg_namespace n JOIN pg_class c ON ((n.oid = c.relnamespace))) WHERE (c.relkind = 'r'::"char")) UNION SELECT (c.oid)::bigint AS table_id, n.nspname AS schemaname, c.relname AS tablename, (400000000 + a.attnum) AS seq, ((((' DISTKEY ('::character varying)::text + quote_ident(((a.attname)::character varying)::text)) + (')'::character varying)::text))::character varying AS ddl FROM ((pg_namespace n JOIN pg_class c ON ((n.oid = c.relnamespace))) JOIN pg_attribute a ON ((c.oid = a.attrelid))) WHERE (((c.relkind = 'r'::"char") AND (a.attisdistkey IS TRUE)) AND (a.attnum > 0))) UNION SELECT derived_table2.table_id, derived_table2.schemaname, derived_table2.tablename, derived_table2.seq, CASE WHEN (derived_table2.min_sort < 0) THEN 'INTERLEAVED SORTKEY ('::character varying ELSE ' SORTKEY ('::character varying END AS ddl FROM (SELECT (c.oid)::bigint AS table_id, n.nspname AS schemaname, c.relname AS tablename, 499999999 AS seq, min(a.attsortkeyord) AS min_sort FROM ((pg_namespace n JOIN pg_class c ON ((n.oid = c.relnamespace))) JOIN pg_attribute a ON ((c.oid = a.attrelid))) WHERE (((c.relkind = 'r'::"char") AND (abs(a.attsortkeyord) > 0)) AND (a.attnum > 0)) GROUP BY (c.oid)::bigint, n.nspname, c.relname, 4) derived_table2) UNION (SELECT (c.oid)::bigint AS table_id, n.nspname AS schemaname, c.relname AS tablename, (500000000 + abs(a.attsortkeyord)) AS seq, (CASE WHEN (abs(a.attsortkeyord) = 1) THEN (('\011'::character varying)::text + quote_ident(((a.attname)::character varying)::text)) ELSE (('\011 , '::character varying)::text + quote_ident(((a.attname)::character varying)::text)) END)::character varying AS ddl FROM ((pg_namespace n JOIN pg_class c ON ((n.oid = c.relnamespace))) JOIN pg_attribute a ON ((c.oid = a.attrelid))) WHERE (((c.relkind = 'r'::"char") AND (abs(a.attsortkeyord) > 0)) AND (a.attnum > 0)) ORDER BY abs(a.attsortkeyord))) UNION SELECT (c.oid)::bigint AS table_id, n.nspname AS schemaname, c.relname AS tablename, 599999999 AS seq, '\011)'::character
            varying AS ddl FROM ((pg_namespace n JOIN pg_class c ON ((n.oid = c.relnamespace))) JOIN pg_attribute a ON ((c.oid = a.attrelid))) WHERE (((c.relkind = 'r'::"char") AND (abs(a.attsortkeyord) > 0))
            AND (a.attnum > 0))) UNION SELECT (c.oid)::bigint AS table_id, n.nspname AS schemaname, c.relname AS tablename, 600000000 AS seq, ';'::character varying AS ddl FROM (pg_namespace n JOIN pg_class c
            ON ((n.oid = c.relnamespace))) WHERE (c.relkind = 'r'::"char")) UNION SELECT (c.oid)::bigint AS table_id, n.nspname AS schemaname, c.relname AS tablename, 600250000 AS seq,
            (((((((((('COMMENT ON '::character varying)::text + (nvl2(cl.column_name, 'column '::character varying, 'table '::character varying))::text) + quote_ident(((n.nspname)::character varying)::text))
            + ('.'::character varying)::text) + quote_ident(((c.relname)::character varying)::text)) + nvl2(cl.column_name, (('.'::character varying)::text + ((cl.column_name)::character varying)::text), (''::character varying)::text)) + (' IS \''::character varying)::text) + quote_ident(des.description)) + ('\'; '::character varying)::text))::character varying AS ddl FROM (((pg_description des JOIN pg_class c ON ((c.oid = des.objoid))) JOIN pg_namespace n ON ((n.oid = c.relnamespace))) LEFT JOIN information_schema."columns" cl ON ((((cl.ordinal_position)::integer = des.objsubid) AND ((cl.table_name)::name = c.relname)))) WHERE (c.relkind = 'r'::"char"))
            UNION SELECT (c.oid)::bigint AS table_id, n.nspname AS schemaname, c.relname AS tablename, 600500000 AS seq, (((((((('ALTER TABLE '::character varying)::text + quote_ident(((n.nspname)::character varying)::text)) + ('.'::character varying)::text) + quote_ident(((c.relname)::character varying)::text)) + (' owner to '::character varying)::text) + quote_ident(((u.usename)::character varying)::text)) + (';'::character varying)::text))::character varying AS ddl FROM ((pg_namespace n JOIN pg_class c ON ((n.oid = c.relnamespace))) JOIN pg_user u ON ((c.relowner = u.usesysid))) WHERE (c.relkind = 'r'::"char")) derived_table3 UNION (SELECT (c.oid)::bigint AS table_id, ((('zzzzzzzz'::character varying)::text || ((n.nspname)::character varying)::text))::character varying AS schemaname, ((('zzzzzzzz'::character varying)::text || ((c.relname)::character varying)::text))::character varying AS tablename, (700000000 + (con.oid)::integer) AS seq, (((((((('ALTER TABLE '::character varying)::text + quote_ident(((n.nspname)::character varying)::text)) + ('.'::character varying)::text) + quote_ident(((c.relname)::character varying)::text)) + (' ADD '::character varying)::text) + ((pg_get_constraintdef(con.oid))::character varying(1024))::text) + (';'::character varying)::text))::character varying AS ddl FROM ((pg_constraint con JOIN pg_class c ON (((c.relnamespace = con.connamespace) AND (c.oid = con.conrelid)))) JOIN pg_namespace n ON ((n.oid = c.relnamespace))) WHERE ((c.relkind = 'r'::"char") AND (con.contype = 'f'::"char")) ORDER BY (700000000 + (con.oid)::integer)) ORDER BY 1, 2, 3, 4) derived_table4;




query2 = SELECT
    -- n.nspname,
    -- b.usename,
    -- p.proname,
    p.prosrc
    FROM
    pg_catalog.pg_namespace n
    INNER JOIN pg_catalog.pg_proc p ON
    pronamespace = n.oid
    join pg_user b on
    b.usesysid = p.proowner
    where
    nspname not in ('pg_catalog', 'pg_toast', 'information_schema','pg_internal')
    and p.prosrc like ('%BEGIN%') ;

query4 = select ddl from admin.v_generate_udf_ddl;
query5 = select ddl from admin.v_generate_tbl_ddl order by schemaname, tablename,seq;

tablelist = select tabLe_name,table_schema from information_schema.tables
            where table_schema not in ('pg_internal','pg_catalog') and table_type = 'BASE TABLE';